server.port=8892
server.servlet.context-path=/api/email
# EUREKA
eureka.client.service-url.defaultZone={cipher}be510b5659a73c1a53eae203673455cd0b33a86a71d50bfaa0e5a1b2602b7a3d356a0553223eee64b01f965cb3810578

# KAFKA CONSUMER
spring.kafka.bootstrap-servers={cipher}fbc65df5c308d37b9924668179fd725ba0cf57633687acec0b718ccfc72631378432fe45aaeabff19c76054aa4348d1951c3ace210430d920853ddc6a8f72bdb42b8cdd186fb150f9b1427e576f1712ef5e0b8819fcaee7ec93e7020b13c4c86
spring.kafka.consumer.group-id=email-service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.topic=ended-product

# AWS SES
aws.ses.access-key={cipher}260df7b5b9604d56d3ea39b48d68898f8458bc3b9454b330c6d74f4a3ff3d0af12ac9a73e9a92f6aaa27ff822a44d8ec
aws.ses.secret-key={cipher}8b16faf6f4830138d7f169fd26276c003de7dc18d08db33e09ce50154f4896132a2f1cf40420eb2c5caaaa8ccec08ff696e4792795444e60160592ad9f2a4de9
aws.region=ap-northeast-2

# LOGGING
logging.pattern.console=%green(%d{yyyy-MM-dd HH:mm:ss.SSS}) %magenta([%thread]) %highlight(%-5level) %cyan(%logger{36}) - %yellow(%msg%n)
logging.level.org.hibernate.SQL=debug
logging.file.path=logs

# REDIS
spring.data.redis.port={cipher}3b53302619987cf1d1b01622095c2bbab7c274d76a2b3c7f05dc9bcb82d401ed
spring.data.redis.host={cipher}860daa211a24591c966544b5520011b0d36a13af95ca170c046c29b4621ef2aa

# Sleuth
spring.sleuth.enabled=true
spring.sleuth.sampler.probability=1.0


# Stream
spring.cloud.stream.kafka.binder.brokers={cipher}fbc65df5c308d37b9924668179fd725ba0cf57633687acec0b718ccfc72631378432fe45aaeabff19c76054aa4348d1951c3ace210430d920853ddc6a8f72bdb42b8cdd186fb150f9b1427e576f1712ef5e0b8819fcaee7ec93e7020b13c4c86
spring.cloud.stream.bindings.output.destination=zipkin

# Zipkin
spring.zipkin.enabled=true
spring.zipkin.sender.type=kafka
spring.zipkin.base-url={cipher}a0a169efc2cea35e3233a1563c8ce762622744627906b03c946256cacbfd919dbd6786451665ae1a0b4a04a0ed61c2f2